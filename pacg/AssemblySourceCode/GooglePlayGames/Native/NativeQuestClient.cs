namespace GooglePlayGames.Native
{
    using GooglePlayGames.BasicApi;
    using GooglePlayGames.BasicApi.Quests;
    using GooglePlayGames.Native.Cwrapper;
    using GooglePlayGames.Native.PInvoke;
    using GooglePlayGames.OurUtils;
    using System;
    using System.Linq;
    using System.Runtime.CompilerServices;

    internal class NativeQuestClient : IQuestsClient
    {
        private readonly GooglePlayGames.Native.PInvoke.QuestManager mManager;

        internal NativeQuestClient(GooglePlayGames.Native.PInvoke.QuestManager manager)
        {
            this.mManager = Misc.CheckNotNull<GooglePlayGames.Native.PInvoke.QuestManager>(manager);
        }

        public void Accept(IQuest quest, Action<GooglePlayGames.BasicApi.Quests.QuestAcceptStatus, IQuest> callback)
        {
            <Accept>c__AnonStoreyD8 yd = new <Accept>c__AnonStoreyD8 {
                callback = callback
            };
            Misc.CheckNotNull<IQuest>(quest);
            Misc.CheckNotNull<Action<GooglePlayGames.BasicApi.Quests.QuestAcceptStatus, IQuest>>(yd.callback);
            yd.callback = CallbackUtils.ToOnGameThread<GooglePlayGames.BasicApi.Quests.QuestAcceptStatus, IQuest>(yd.callback);
            NativeQuest quest2 = quest as NativeQuest;
            if (quest2 == null)
            {
                Logger.e("Encountered quest that was not generated by this IQuestClient");
                yd.callback(GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.BadInput, null);
            }
            else
            {
                this.mManager.Accept(quest2, new Action<GooglePlayGames.Native.PInvoke.QuestManager.AcceptResponse>(yd.<>m__40));
            }
        }

        public void ClaimMilestone(IQuestMilestone milestone, Action<GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus, IQuest, IQuestMilestone> callback)
        {
            <ClaimMilestone>c__AnonStoreyD9 yd = new <ClaimMilestone>c__AnonStoreyD9 {
                callback = callback
            };
            Misc.CheckNotNull<IQuestMilestone>(milestone);
            Misc.CheckNotNull<Action<GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus, IQuest, IQuestMilestone>>(yd.callback);
            yd.callback = CallbackUtils.ToOnGameThread<GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus, IQuest, IQuestMilestone>(yd.callback);
            NativeQuestMilestone milestone2 = milestone as NativeQuestMilestone;
            if (milestone2 == null)
            {
                Logger.e("Encountered milestone that was not generated by this IQuestClient");
                yd.callback(GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.BadInput, null, null);
            }
            else
            {
                this.mManager.ClaimMilestone(milestone2, new Action<GooglePlayGames.Native.PInvoke.QuestManager.ClaimMilestoneResponse>(yd.<>m__41));
            }
        }

        public void Fetch(GooglePlayGames.BasicApi.DataSource source, string questId, Action<GooglePlayGames.BasicApi.ResponseStatus, IQuest> callback)
        {
            <Fetch>c__AnonStoreyD5 yd = new <Fetch>c__AnonStoreyD5 {
                callback = callback
            };
            Misc.CheckNotNull<string>(questId);
            Misc.CheckNotNull<Action<GooglePlayGames.BasicApi.ResponseStatus, IQuest>>(yd.callback);
            yd.callback = CallbackUtils.ToOnGameThread<GooglePlayGames.BasicApi.ResponseStatus, IQuest>(yd.callback);
            this.mManager.Fetch(ConversionUtils.AsDataSource(source), questId, new Action<GooglePlayGames.Native.PInvoke.QuestManager.FetchResponse>(yd.<>m__3D));
        }

        public void FetchMatchingState(GooglePlayGames.BasicApi.DataSource source, QuestFetchFlags flags, Action<GooglePlayGames.BasicApi.ResponseStatus, List<IQuest>> callback)
        {
            <FetchMatchingState>c__AnonStoreyD6 yd = new <FetchMatchingState>c__AnonStoreyD6 {
                callback = callback
            };
            Misc.CheckNotNull<Action<GooglePlayGames.BasicApi.ResponseStatus, List<IQuest>>>(yd.callback);
            yd.callback = CallbackUtils.ToOnGameThread<GooglePlayGames.BasicApi.ResponseStatus, List<IQuest>>(yd.callback);
            this.mManager.FetchList(ConversionUtils.AsDataSource(source), (int) flags, new Action<GooglePlayGames.Native.PInvoke.QuestManager.FetchListResponse>(yd.<>m__3E));
        }

        private static GooglePlayGames.BasicApi.Quests.QuestAcceptStatus FromAcceptStatus(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus status)
        {
            GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus status2 = status;
            switch ((status2 + 5))
            {
                case ~(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus.VALID | GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus.ERROR_INTERNAL):
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.Timeout;

                case ~GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus.ERROR_NOT_AUTHORIZED:
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.NotAuthorized;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus) 3):
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.InternalError;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus) 6):
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.Success;
            }
            switch (status2)
            {
                case GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus.ERROR_QUEST_NOT_STARTED:
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.QuestNotStarted;

                case GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestAcceptStatus.ERROR_QUEST_NO_LONGER_AVAILABLE:
                    return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.QuestNoLongerAvailable;
            }
            Logger.e("Encountered unknown status: " + status);
            return GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.InternalError;
        }

        private static GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus FromClaimStatus(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus status)
        {
            GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus status2 = status;
            switch ((status2 + 5))
            {
                case ~(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus.VALID | GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_INTERNAL):
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.Timeout;

                case ~GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_NOT_AUTHORIZED:
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.NotAuthorized;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus) 3):
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.InternalError;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus) 6):
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.Success;
            }
            switch (status2)
            {
                case GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_MILESTONE_CLAIM_FAILED:
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.MilestoneClaimFailed;

                case GooglePlayGames.Native.Cwrapper.CommonErrorStatus.QuestClaimMilestoneStatus.ERROR_MILESTONE_ALREADY_CLAIMED:
                    return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.MilestoneAlreadyClaimed;
            }
            Logger.e("Encountered unknown status: " + status);
            return GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.InternalError;
        }

        private static Action<GooglePlayGames.Native.PInvoke.QuestManager.QuestUIResponse> FromQuestUICallback(Action<QuestUiResult, IQuest, IQuestMilestone> callback)
        {
            <FromQuestUICallback>c__AnonStoreyD7 yd = new <FromQuestUICallback>c__AnonStoreyD7 {
                callback = callback
            };
            return new Action<GooglePlayGames.Native.PInvoke.QuestManager.QuestUIResponse>(yd.<>m__3F);
        }

        public void ShowAllQuestsUI(Action<QuestUiResult, IQuest, IQuestMilestone> callback)
        {
            Misc.CheckNotNull<Action<QuestUiResult, IQuest, IQuestMilestone>>(callback);
            callback = CallbackUtils.ToOnGameThread<QuestUiResult, IQuest, IQuestMilestone>(callback);
            this.mManager.ShowAllQuestUI(FromQuestUICallback(callback));
        }

        public void ShowSpecificQuestUI(IQuest quest, Action<QuestUiResult, IQuest, IQuestMilestone> callback)
        {
            Misc.CheckNotNull<IQuest>(quest);
            Misc.CheckNotNull<Action<QuestUiResult, IQuest, IQuestMilestone>>(callback);
            callback = CallbackUtils.ToOnGameThread<QuestUiResult, IQuest, IQuestMilestone>(callback);
            NativeQuest quest2 = quest as NativeQuest;
            if (quest2 == null)
            {
                Logger.e("Encountered quest that was not generated by this IQuestClient");
                callback(QuestUiResult.BadInput, null, null);
            }
            else
            {
                this.mManager.ShowQuestUI(quest2, FromQuestUICallback(callback));
            }
        }

        private static QuestUiResult UiErrorToQuestUiResult(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus status)
        {
            GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus status2 = status;
            switch ((status2 + 12))
            {
                case ~(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus.VALID | GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus.ERROR_INTERNAL):
                    return QuestUiResult.UiBusy;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus) 6):
                    return QuestUiResult.UserCanceled;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus) 7):
                    return QuestUiResult.Timeout;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus) 8):
                    return QuestUiResult.VersionUpdateRequired;

                case ((GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus) 9):
                    return QuestUiResult.NotAuthorized;

                case ~(GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus.VALID | GooglePlayGames.Native.Cwrapper.CommonErrorStatus.UIStatus.ERROR_UI_BUSY):
                    return QuestUiResult.InternalError;
            }
            Logger.e("Unknown error status: " + status);
            return QuestUiResult.InternalError;
        }

        [CompilerGenerated]
        private sealed class <Accept>c__AnonStoreyD8
        {
            internal Action<GooglePlayGames.BasicApi.Quests.QuestAcceptStatus, IQuest> callback;

            internal void <>m__40(GooglePlayGames.Native.PInvoke.QuestManager.AcceptResponse response)
            {
                if (response.RequestSucceeded())
                {
                    this.callback(GooglePlayGames.BasicApi.Quests.QuestAcceptStatus.Success, response.AcceptedQuest());
                }
                else
                {
                    this.callback(NativeQuestClient.FromAcceptStatus(response.ResponseStatus()), null);
                }
            }
        }

        [CompilerGenerated]
        private sealed class <ClaimMilestone>c__AnonStoreyD9
        {
            internal Action<GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus, IQuest, IQuestMilestone> callback;

            internal void <>m__41(GooglePlayGames.Native.PInvoke.QuestManager.ClaimMilestoneResponse response)
            {
                if (response.RequestSucceeded())
                {
                    this.callback(GooglePlayGames.BasicApi.Quests.QuestClaimMilestoneStatus.Success, response.Quest(), response.ClaimedMilestone());
                }
                else
                {
                    this.callback(NativeQuestClient.FromClaimStatus(response.ResponseStatus()), null, null);
                }
            }
        }

        [CompilerGenerated]
        private sealed class <Fetch>c__AnonStoreyD5
        {
            internal Action<GooglePlayGames.BasicApi.ResponseStatus, IQuest> callback;

            internal void <>m__3D(GooglePlayGames.Native.PInvoke.QuestManager.FetchResponse response)
            {
                GooglePlayGames.BasicApi.ResponseStatus status = ConversionUtils.ConvertResponseStatus(response.ResponseStatus());
                if (!response.RequestSucceeded())
                {
                    this.callback(status, null);
                }
                else
                {
                    this.callback(status, response.Data());
                }
            }
        }

        [CompilerGenerated]
        private sealed class <FetchMatchingState>c__AnonStoreyD6
        {
            internal Action<GooglePlayGames.BasicApi.ResponseStatus, List<IQuest>> callback;

            internal void <>m__3E(GooglePlayGames.Native.PInvoke.QuestManager.FetchListResponse response)
            {
                GooglePlayGames.BasicApi.ResponseStatus status = ConversionUtils.ConvertResponseStatus(response.ResponseStatus());
                if (!response.RequestSucceeded())
                {
                    this.callback(status, null);
                }
                else
                {
                    this.callback(status, response.Data().Cast<IQuest>().ToList<IQuest>());
                }
            }
        }

        [CompilerGenerated]
        private sealed class <FromQuestUICallback>c__AnonStoreyD7
        {
            internal Action<QuestUiResult, IQuest, IQuestMilestone> callback;

            internal void <>m__3F(GooglePlayGames.Native.PInvoke.QuestManager.QuestUIResponse response)
            {
                if (!response.RequestSucceeded())
                {
                    this.callback(NativeQuestClient.UiErrorToQuestUiResult(response.RequestStatus()), null, null);
                }
                else
                {
                    NativeQuest quest = response.AcceptedQuest();
                    NativeQuestMilestone milestone = response.MilestoneToClaim();
                    if (quest != null)
                    {
                        this.callback(QuestUiResult.UserRequestsQuestAcceptance, quest, null);
                        milestone.Dispose();
                    }
                    else if (milestone != null)
                    {
                        this.callback(QuestUiResult.UserRequestsMilestoneClaiming, null, response.MilestoneToClaim());
                        quest.Dispose();
                    }
                    else
                    {
                        Logger.e("Quest UI succeeded without a quest acceptance or milestone claim.");
                        quest.Dispose();
                        milestone.Dispose();
                        this.callback(QuestUiResult.InternalError, null, null);
                    }
                }
            }
        }
    }
}

